{"version":3,"file":"functions.js","mappings":"yBACA,ICkEMA,EAAkB,CAAC,GAEzB,SAAUA,GAEN,IAGMC,EAAe,GAGjBC,EAAc,EAGZC,EAA0B,CAAC,EAqDjCH,EAAgBI,uBAdhB,SAAgCC,EAAcC,GAC1C,IAAMC,EAAQL,IACd,OAAO,IAAIM,SAAQ,SAASC,EAASC,GAEjCP,EAAwBI,GAAS,CAACE,QAASA,EAASC,OAAQA,GAC5D,IAAMC,EA1Cd,SAA8BJ,GAC1B,IAAMK,EAAQL,EAZM,EAapB,GAAIN,EAAaW,GACb,OAAOX,EAAaW,GAIxB,IAAMC,EAAY,IAAIC,OAAO,uBA0B7B,OAzBAD,EAAUE,iBAAiB,WAAW,SAASC,GAC3C,IAAIC,EAAYD,EAAME,KAKtB,GAJyB,iBAAdD,IACPA,EAAYE,KAAKC,MAAMH,IAGI,iBAApBA,EAAUV,MAAoB,CACrC,IAAMA,EAAQU,EAAUV,MAElBc,EAAclB,EAAwBI,GACxCc,IACIJ,EAAUK,MAEVD,EAAYX,OAAO,IAAIa,OAIvBF,EAAYZ,QAAQQ,EAAUO,eAE3BrB,EAAwBI,GAEvC,CACJ,IAEAN,EAAaW,GAASC,EACfA,CACX,CAQuBY,CAAqBlB,GACpCI,EAAOe,YAAY,CACfnB,MAAOA,EACPoB,KAAMtB,EACNC,WAAYA,GAEpB,GACJ,CAGH,CAjED,CAiEGN,GA4FH4B,gBAAgBC,UAAU,OAzNnB,SAAaC,EAAOC,GACzB,OAAOD,EAAQC,CACjB,IAwNAH,gBAAgBC,UAAU,SAjNnB,SAAeG,GACpB,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAyMAL,gBAAgBC,UAAU,aAzLnB,SAAmBY,EAAaT,GACrC,IAAIR,EAAS,EACPS,EAAQC,aAAY,WACxBV,GAAUiB,EACVT,EAAWM,UAAUd,EACvB,GAAG,KAEHQ,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAgLAL,gBAAgBC,UAAU,OAxKnB,SAAoBa,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IAqKAd,gBAAgBC,UAAU,QAxFnB,SAAcgB,GACjB,OAAO7C,EAAgBI,uBAAuB,OAAQ,CAACyC,GAC3D,IAuFAjB,gBAAgBC,UAAU,gBA/EnB,SAAsBgB,GACzB,OAAO7C,EAAgBI,uBAAuB,eAAgB,CAACyC,GACnE,IA8EAjB,gBAAgBC,UAAU,cAtEnB,SAAoBgB,GACvB,OAAO7C,EAAgBI,uBAAuB,aAAc,CAACyC,GACjE,IAqEAjB,gBAAgBC,UAAU,sBA7DnB,SAA4BgB,GAC/B,OAAO7C,EAAgBI,uBAAuB,qBAAsB,CAACyC,GACzE,IA4DAjB,gBAAgBC,UAAU,kBApDnB,SAAwBgB,GAE3B,IADA,IAAIC,EAAM,EACDC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxBD,GAAOE,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAK,aACtG,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAGM,IACnBL,GAAOE,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAK,YAE9G,CACA,OAAOJ,CACX,G","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/* global clearInterval, console, setInterval */\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nexport function add(first, second) {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nexport function clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nexport function currentTime() {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nexport function increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param {string} message String to write.\n * @returns String to write.\n */\nexport function logMessage(message) {\n  console.log(message);\n\n  return message;\n}\n\nconst SampleNamespace = {};\n\n(function(SampleNamespace) {\n    // The max number of web workers to be created\n    const g_maxWebWorkers = 4;\n\n    // The array of web workers\n    const g_webworkers = [];\n    \n    // Next job id\n    let g_nextJobId = 0;\n\n    // The promise info for the job. It stores the {resolve: resolve, reject: reject} information for the job.\n    const g_jobIdToPromiseInfoMap = {};\n\n    function getOrCreateWebWorker(jobId) {\n        const index = jobId % g_maxWebWorkers;\n        if (g_webworkers[index]) {\n            return g_webworkers[index];\n        }\n\n        // create a new web worker\n        const webWorker = new Worker(\"functionssWorker.js\");\n        webWorker.addEventListener('message', function(event) {\n            let jobResult = event.data;\n            if (typeof(jobResult) == \"string\") {\n                jobResult = JSON.parse(jobResult);\n            }\n\n            if (typeof(jobResult.jobId) == \"number\") {\n                const jobId = jobResult.jobId;\n                // get the promise info associated with the job id\n                const promiseInfo = g_jobIdToPromiseInfoMap[jobId];\n                if (promiseInfo) {\n                    if (jobResult.error) {\n                        // The web worker returned an error\n                        promiseInfo.reject(new Error());\n                    }\n                    else {\n                        // The web worker returned a result\n                        promiseInfo.resolve(jobResult.result);\n                    }\n                    delete g_jobIdToPromiseInfoMap[jobId];\n                }\n            }\n        });\n\n        g_webworkers[index] = webWorker;\n        return webWorker;\n    }\n\n    // Post a job to the web worker to do the calculation\n    function dispatchCalculationJob(functionName, parameters) {\n        const jobId = g_nextJobId++;\n        return new Promise(function(resolve, reject) {\n            // store the promise information.\n            g_jobIdToPromiseInfoMap[jobId] = {resolve: resolve, reject: reject};\n            const worker = getOrCreateWebWorker(jobId);\n            worker.postMessage({\n                jobId: jobId,\n                name: functionName,\n                parameters: parameters\n            });\n        });\n    }\n\n    SampleNamespace.dispatchCalculationJob = dispatchCalculationJob;\n})(SampleNamespace);\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} n First number\n * @returns {number} The sum of the two numbers.\n */\nexport function TEST(n) {\n    return SampleNamespace.dispatchCalculationJob(\"TEST\", [n]);\n}\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} n First number\n * @returns {number} The sum of the two numbers.\n */\nexport function TEST_PROMISE(n) {\n    return SampleNamespace.dispatchCalculationJob(\"TEST_PROMISE\", [n]);\n}\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} n First number\n * @returns {number} The sum of the two numbers.\n */\nexport function TEST_ERROR(n) {\n    return SampleNamespace.dispatchCalculationJob(\"TEST_ERROR\", [n]);\n}\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} n First number\n * @returns {number} The sum of the two numbers.\n */\nexport function TEST_ERROR_PROMISE(n) {\n    return SampleNamespace.dispatchCalculationJob(\"TEST_ERROR_PROMISE\", [n]);\n}\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} n First number\n * @returns {number} The sum of the two numbers.\n */\nexport function TEST_UI_THREAD(n) {\n    let ret = 0;\n    for (let i = 0; i < n; i++) {\n        ret += Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(50))))))))));\n        for (let l = 0; l < n; l++) {\n            ret -= Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(50))))))))));     \n        }\n    }\n    return ret;\n}\n\n/** \nCustomFunctions.associate(\"TEST\", function(n) {\n    return SampleNamespace.dispatchCalculationJob(\"TEST\", [n]);\n});\n\nCustomFunctions.associate(\"TEST_PROMISE\", function(n) {\n    return SampleNamespace.dispatchCalculationJob(\"TEST_PROMISE\", [n]);\n});\n\nCustomFunctions.associate(\"TEST_ERROR\", function(n) {\n    return SampleNamespace.dispatchCalculationJob(\"TEST_ERROR\", [n]);\n});\n\nCustomFunctions.associate(\"TEST_ERROR_PROMISE\", function(n) {\n    return SampleNamespace.dispatchCalculationJob(\"TEST_ERROR_PROMISE\", [n]);\n});\n\n\n// This function will show what happens when calculations are run on the main UI thread.\n// The task pane will be blocked until this method completes.\nCustomFunctions.associate(\"TEST_UI_THREAD\", function(n) {\n    let ret = 0;\n    for (let i = 0; i < n; i++) {\n        ret += Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(50))))))))));\n        for (let l = 0; l < n; l++) {\n            ret -= Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(50))))))))));     \n        }\n    }\n    return ret;\n});\n\n*/\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"TEST\", TEST);\nCustomFunctions.associate(\"TEST_PROMISE\", TEST_PROMISE);\nCustomFunctions.associate(\"TEST_ERROR\", TEST_ERROR);\nCustomFunctions.associate(\"TEST_ERROR_PROMISE\", TEST_ERROR_PROMISE);\nCustomFunctions.associate(\"TEST_UI_THREAD\", TEST_UI_THREAD);"],"names":["SampleNamespace","g_webworkers","g_nextJobId","g_jobIdToPromiseInfoMap","dispatchCalculationJob","functionName","parameters","jobId","Promise","resolve","reject","worker","index","webWorker","Worker","addEventListener","event","jobResult","data","JSON","parse","promiseInfo","error","Error","result","getOrCreateWebWorker","postMessage","name","CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","message","console","log","n","ret","i","Math","tan","atan","l"],"sourceRoot":""}