{"version":3,"file":"functionssWorker.js","mappings":"kPAkEA,SAASA,EAAKC,GAEV,IADA,IAAIC,EAAM,EACDC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxBD,GAAOE,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAK,aACtG,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAGM,IACnBL,GAAOE,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAKF,KAAKC,IAAID,KAAKE,KAAK,YAE9G,CACA,OAAOJ,CACX,CAGA,SAASM,EAAaP,GAClB,OAAO,IAAIQ,SAAQ,SAASC,EAASC,GACjCC,YAAW,WACPF,EAAQV,EAAKC,GACjB,GAAG,IACP,GACJ,CAEA,SAASY,EAAWZ,GAChB,MAAM,IAAIa,KACd,CAEA,SAASC,EAAmBd,GACxB,OAAOQ,QAAQE,OAAO,IAAIG,MAC9B,CAzFAE,KAAKC,iBAAiB,WAClB,SAASC,GACL,IAAIC,EAAMD,EAAME,KACG,iBAARD,IACPA,EAAME,KAAKC,MAAMH,IAGrB,IAAMI,EAAQJ,EAAII,MAClB,IACI,IAAMC,EAoClB,SAAwBC,EAAMC,GAC1B,GAAY,QAARD,EACA,OAAOzB,EAAK2B,MAAM,KAAMD,GAEvB,GAAY,gBAARD,EACL,OAAOjB,EAAamB,MAAM,KAAMD,GAE/B,GAAY,cAARD,EACL,OAAOZ,EAAWc,MAAM,KAAMD,GAE7B,GAAY,sBAARD,EACL,OAAOV,EAAmBY,MAAM,KAAMD,GAGtC,MAAM,IAAIZ,MAAM,gBAExB,CApD2Bc,CAAeT,EAAIM,KAAMN,EAAIO,YAEtB,mBAAXF,GAA2C,UAAlBK,EAAOL,IAA8C,mBAAhBA,EAAOM,KAC5EN,EAAOM,MAAK,SAASC,GACjBC,YACI,CACIT,MAAOA,EACPC,OAAQO,GAGpB,IACCE,OAAM,SAASC,GACZF,YACI,CACIT,MAAOA,EACPY,OAAO,GAGnB,IAGAH,YAAY,CACRT,MAAOA,EACPC,OAAQA,GAGpB,CACA,MAAMU,GACFF,YAAY,CACRT,MAAOA,EACPY,OAAO,GAEf,CACJ,G","sources":["webpack://excel-custom-functions-js/./src/functions/functions-worker.js"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nself.addEventListener('message',\n    function(event) {\n        let job = event.data;\n        if (typeof(job) == \"string\") {\n            job = JSON.parse(job);\n        }\n\n        const jobId = job.jobId;\n        try {\n            const result = invokeFunction(job.name, job.parameters);\n            // check whether the result is a promise.\n            if (typeof(result) == \"function\" || typeof(result) == \"object\" && typeof(result.then) == \"function\") {\n                result.then(function(realResult) {\n                    postMessage(\n                        {\n                            jobId: jobId,\n                            result: realResult\n                        }\n                    );\n                })\n                .catch(function(ex) {\n                    postMessage(\n                        {\n                            jobId: jobId,\n                            error: true\n                        }\n                    )\n                });\n            }\n            else {\n                postMessage({\n                    jobId: jobId,\n                    result: result\n                });\n            }\n        }\n        catch(ex) {\n            postMessage({\n                jobId: jobId,\n                error: true\n            });\n        }\n    }\n);\n\nfunction invokeFunction(name, parameters) {\n    if (name == \"TEST\") {\n        return test.apply(null, parameters);\n    }\n    else if (name == \"TEST_PROMISE\") {\n        return test_promise.apply(null, parameters);\n    }\n    else if (name == \"TEST_ERROR\") {\n        return test_error.apply(null, parameters);\n    }\n    else if (name == \"TEST_ERROR_PROMISE\") {\n        return test_error_promise.apply(null, parameters);\n    }\n    else {\n        throw new Error(\"not supported\");\n    }\n}\n\nfunction test(n) {\n    let ret = 0;\n    for (let i = 0; i < n; i++) {\n        ret += Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(50))))))))));\n        for (let l = 0; l < n; l++) {\n            ret -= Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(Math.tan(Math.atan(50))))))))));     \n        }\n    }\n    return ret;\n}\n\n\nfunction test_promise(n) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(function() {\n            resolve(test(n));\n        }, 1000);\n    });\n}\n\nfunction test_error(n) {\n    throw new Error();\n}\n\nfunction test_error_promise(n) {\n    return Promise.reject(new Error());\n}"],"names":["test","n","ret","i","Math","tan","atan","l","test_promise","Promise","resolve","reject","setTimeout","test_error","Error","test_error_promise","self","addEventListener","event","job","data","JSON","parse","jobId","result","name","parameters","apply","invokeFunction","_typeof","then","realResult","postMessage","catch","ex","error"],"sourceRoot":""}